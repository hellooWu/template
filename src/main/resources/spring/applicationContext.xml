<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">
		
		
		
		
	<!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 -->    
   <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">    
       <property name="defaultEncoding" value="UTF-8"/>    
       <!-- 指定所上传文件的总大小不能超过200KB。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 -->    
       <!-- 不在这里限制了,后台各自进行限制了  
       <property name="maxUploadSize" value="2000000"/>   
       -->   
    </bean>   

		
		
		
	<!-- 加载配置文件 -->
	<context:property-placeholder location="classpath:db.properties"/>
	<!-- 扫描有注解的包并在容器初始化时全部初始化bean -->
<!-- 	<context:component-scan base-package="com.wujialong.service"></context:component-scan> -->
	<context:component-scan base-package="cn.com.lenovo.controller"></context:component-scan>
	
	<!-- 使用 mvc:annotation-driven代替上边注解映射器和注解适配器配置
	mvc:annotation-driven默认加载很多的参数绑定方法，
	比如json转换解析器就默认加载了，如果使用mvc:annotation-driven不用配置上边的RequestMappingHandlerMapping和RequestMappingHandlerAdapter
	实际开发时使用mvc:annotation-driven
	 -->
	<mvc:annotation-driven ></mvc:annotation-driven>
	
	<!-- Handles HTTP GET requests 
	for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/common/**" location="/common/" />
	<mvc:resources mapping="/styles/**" location="/styles/" />
	<mvc:resources mapping="/images/**" location="/images/" />
	<mvc:resources mapping="/scripts/**" location="/scripts/" />
	<mvc:resources mapping="/resources/**" location="/resources/" />
	<mvc:resources mapping="/decorators/**" location="/decorators/" />
	<mvc:default-servlet-handler />  
	
	



	
	<!-- 数据源使用dbcp(带连接池) -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
		<property name="maxActive" value="10"/>
		<property name="maxIdle" value="5"/>
	</bean>
	
	
	<!-- 让spring管理sqlsessionfactory 注意：在定义sqlSessionFactory时指定数据源dataSource和mybatis的配置文件 -->	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 数据库连接池 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 加载mybatis的全局配置文件 -->
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
	</bean>


	<!-- 原始Dao接口 -->
	<!-- <bean id="userDao" class="dao.UserDaoImpl">
		<property name="sqlSessionFactory" ref="sqlSessionFactory"/>	
	</bean>	  -->
	
	<!-- mapper代理 
		根据接口生成代理对象
		使用MapperFactoryBean-->
	<!-- 使用这种方法的缺点:需要给每个mapper配置,麻烦 -->
	<!-- <bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="mapper.UserMapper"/>
		<property name="sqlSessionFactory" ref="sqlSessionFactory"/>
	</bean> -->
	
	
	
	
	
	<!-- mapper的批量扫描 -->
	<!-- 有个坑:不能用MapperScannerConfigurer中的sqlSessionFactory利用ref配置,这样的话此句在加载配置文件前执行使其无效??!!! -->
	<!-- 自动扫描出来的mapper的类名ID为首字母小写 -->
	
	<!--  这样配置的话mybatis中的配置文件也不用写加载mapper的映射文件     why?!?!-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.wujialong.mapper"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>
		
		
		
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 配置jsp路径的前缀 -->
		<property name="prefix" value="/WEB-INF/jsp/"/>
		<!-- 配置jsp路径的后缀 -->
		<property name="suffix" value=".jsp"/>
	</bean>
	
		

		
		
</beans>